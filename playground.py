
import dearpygui.dearpygui as dpg
import numpy as np
import meep as mp
import array
import math
def _help(message):
    last_item = dpg.last_item()
    group = dpg.add_group(horizontal=True)
    dpg.move_item(last_item, parent=group)
    dpg.capture_next_item(lambda s: dpg.move_item(s, parent=group))
    t = dpg.add_text("[!]", color=[0, 255, 0])
    with dpg.tooltip(t):
        dpg.add_text(message)

import matplotlib.pyplot as plt

dpg.create_context()
dpg.create_viewport(title='Custom Title', width=1280, height=900)








def update_plane(sender,app_data, user_data):
    slider_pos = dpg.get_value(sender)
    max_val = user_data[0]
    norm = user_data[1]
    size = user_data[2]
    center = norm*slider_pos
    #print(center)
    center = tuple(center)

    temp = sim.plot2D(output_plane=mp.simulation.Volume(size=size,center = center))
    plt.close('all')
    data = temp.get_images()[0].get_array().data
    #print(data)

    for i in range (101 * 101 * 4):
        pix = i // 4
        x = pix // 101
        y = pix % 101

        #print(x,y)

        val = (max_val - data[x][y])/ max_val

        try:
            # R

            if i % 4 == 0:
                raw_data[i] = val

            # G
            elif i % 4 == 1:
                raw_data[i] = val
            # B
            elif i % 4 == 2:
                raw_data[i] = val
            #A
            elif i % 4 == 3:
                pass

        except IndexError:
            print("i")
            break


        
cell_size = mp.Vector3(2,2,2)

# A hexagon is defined as a prism with six vertices centered on the origin
vertices = [mp.Vector3(-1,0),
            mp.Vector3(-0.5,math.sqrt(3)/2),
            mp.Vector3(0.5,math.sqrt(3)/2),
            mp.Vector3(1,0),
            mp.Vector3(0.5,-math.sqrt(3)/2),
            mp.Vector3(-0.5,-math.sqrt(3)/2)]

geometry = [mp.Prism(vertices, height=1.0, material=mp.Medium(index=3.5)),
            mp.Cone(radius=1.0, radius2=0.1, height=2.0, material=mp.air)]

sim = mp.Simulation(resolution=50,
                    cell_size=cell_size,
                    geometry=geometry)




with dpg.window(label='main',width=1280,height=900):
    width, height, channels, data = dpg.load_image("sim_domain.png")
    texture_data = []
    for i in range(0, 101 * 101):
        texture_data.append(255 / 255)
        texture_data.append(255 / 255)
        texture_data.append(255 / 255)
        texture_data.append(255 / 255)
    raw_data = array.array('f',texture_data)



    with dpg.group(horizontal=True):
        with dpg.group():
            with dpg.texture_registry(show=False):
                dpg.add_raw_texture(width=101, height=101, default_value=raw_data, format=dpg.mvFormat_Float_rgba, tag="texture_tag")
            with dpg.group():
                dpg.add_image("texture_tag",)
            


            slider = dpg.add_slider_float(width= 300,min_value=-2.,max_value=2.,default_value=0.0,callback=update_plane,user_data=[3.5*3.5,np.array([0,0,1]),(2,2,0)])


    with dpg.group(horizontal=True):

        dpg.add_button(label='3D view',callback=lambda: update_3d_plot())
        _help("DearPyGui have no 3D visualiser. 3D View is generated by Vispy.")
        

        
def update_3d_plot():
    sim.plot3D()
    plt.show()

        







dpg.setup_dearpygui()
dpg.show_viewport()
dpg.start_dearpygui()

dpg.destroy_context()